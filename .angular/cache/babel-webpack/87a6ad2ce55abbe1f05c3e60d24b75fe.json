{"ast":null,"code":"import _asyncToGenerator from \"/Applications/admin_gooway/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthApiService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.loggedIn = new BehaviorSubject(true);\n    this.urlApi = environment.url_api;\n  }\n\n  handleError(err) {\n    let errorMessage = '';\n\n    if (err.error instanceof ErrorEvent) {\n      // Error del lado del cliente\n      errorMessage = `Error: ${err.error.message}`;\n    } else {\n      // Error del lado del servidor\n      errorMessage = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n    } // Devuelve el error envuelto en un throwError para que catchError lo procese correctamente\n\n\n    return throwError(() => new Error(errorMessage));\n  }\n\n  get isLoggedIn() {\n    this.local = localStorage.getItem('local_user');\n\n    if (this.local) {\n      this.loggedIn.next(false);\n    } else {\n      this.loggedIn.next(true);\n      this.logout();\n    }\n\n    return this.loggedIn.asObservable();\n  }\n\n  login(datauser) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const URI = _this.urlApi + 'auth/login';\n        const response = yield _this.http.post(URI, datauser).toPromise();\n\n        if (response.status == 400) {\n          let data = {\n            email: \"frainer2013@gmail.com\",\n            password: \"1234567\",\n            name: \"Frainer\",\n            lastName: \"Simarra Aguilar\"\n          };\n\n          _this.loggedIn.next(false);\n\n          localStorage.setItem('local_user', JSON.stringify(data));\n        }\n\n        return response;\n      } catch (error) {\n        let user = {\n          error: true,\n          msg: 'Ha ocurrido un error inesperado'\n        };\n        return {\n          user: user\n        };\n      }\n    })();\n  }\n\n  registerUser(dataUser) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const URI = _this2.urlApi + 'auth/register';\n        const data = yield _this2.http.post(URI, dataUser).toPromise();\n        console.log('result service register ', data);\n        return data;\n      } catch (error) {\n        return error;\n      }\n    })();\n  }\n\n  logout() {\n    localStorage.removeItem('local_user');\n    this.loggedIn.next(true);\n    localStorage.clear();\n    this.router.navigate(['/login']);\n  } // protected():Observable<any>{\n  //   const URI = this.urlApi + 'auth/protected';\n  //   return this.http.get(URI).pipe(\n  //     catchError((err: HttpErrorResponse) => {\n  //       if (err.status === 401) {\n  //         this.logout() \n  //       }\n  //       // Lanza el error nuevamente para ser manejado\n  //       return this.handleError(err);\n  //     })\n  //   );\n  // }\n\n\n  getInfoLocal() {\n    this.local = JSON.parse(`${localStorage.getItem('local_user')}`);\n    return this.local;\n  }\n\n}\n\nAuthApiService.ɵfac = function AuthApiService_Factory(t) {\n  return new (t || AuthApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthApiService,\n  factory: AuthApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Applications/admin_gooway/src/app/infrastructure/services/auth-api/auth-api.service.ts"],"names":["BehaviorSubject","throwError","environment","i0","i1","i2","AuthApiService","constructor","http","router","loggedIn","urlApi","url_api","handleError","err","errorMessage","error","ErrorEvent","message","status","Error","isLoggedIn","local","localStorage","getItem","next","logout","asObservable","login","datauser","URI","response","post","toPromise","data","email","password","name","lastName","setItem","JSON","stringify","user","msg","registerUser","dataUser","console","log","removeItem","clear","navigate","getInfoLocal","parse","ɵfac","AuthApiService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthApiService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n        this.loggedIn = new BehaviorSubject(true);\n        this.urlApi = environment.url_api;\n    }\n    handleError(err) {\n        let errorMessage = '';\n        if (err.error instanceof ErrorEvent) {\n            // Error del lado del cliente\n            errorMessage = `Error: ${err.error.message}`;\n        }\n        else {\n            // Error del lado del servidor\n            errorMessage = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n        }\n        // Devuelve el error envuelto en un throwError para que catchError lo procese correctamente\n        return throwError(() => new Error(errorMessage));\n    }\n    get isLoggedIn() {\n        this.local = localStorage.getItem('local_user');\n        if (this.local) {\n            this.loggedIn.next(false);\n        }\n        else {\n            this.loggedIn.next(true);\n            this.logout();\n        }\n        return this.loggedIn.asObservable();\n    }\n    async login(datauser) {\n        try {\n            const URI = this.urlApi + 'auth/login';\n            const response = await this.http.post(URI, datauser).toPromise();\n            if (response.status == 400) {\n                let data = {\n                    email: \"frainer2013@gmail.com\",\n                    password: \"1234567\",\n                    name: \"Frainer\",\n                    lastName: \"Simarra Aguilar\"\n                };\n                this.loggedIn.next(false);\n                localStorage.setItem('local_user', JSON.stringify(data));\n            }\n            return response;\n        }\n        catch (error) {\n            let user = {\n                error: true,\n                msg: 'Ha ocurrido un error inesperado'\n            };\n            return { user: user };\n        }\n    }\n    async registerUser(dataUser) {\n        try {\n            const URI = this.urlApi + 'auth/register';\n            const data = await this.http.post(URI, dataUser).toPromise();\n            console.log('result service register ', data);\n            return data;\n        }\n        catch (error) {\n            return error;\n        }\n    }\n    logout() {\n        localStorage.removeItem('local_user');\n        this.loggedIn.next(true);\n        localStorage.clear();\n        this.router.navigate(['/login']);\n    }\n    // protected():Observable<any>{\n    //   const URI = this.urlApi + 'auth/protected';\n    //   return this.http.get(URI).pipe(\n    //     catchError((err: HttpErrorResponse) => {\n    //       if (err.status === 401) {\n    //         this.logout() \n    //       }\n    //       // Lanza el error nuevamente para ser manejado\n    //       return this.handleError(err);\n    //     })\n    //   );\n    // }\n    getInfoLocal() {\n        this.local = JSON.parse(`${localStorage.getItem('local_user')}`);\n        return this.local;\n    }\n}\nAuthApiService.ɵfac = function AuthApiService_Factory(t) { return new (t || AuthApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nAuthApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthApiService, factory: AuthApiService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}