{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nfunction Knob__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"x\", 50)(\"y\", 57)(\"fill\", ctx_r0.textColor)(\"name\", ctx_r0.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.valueToDisplay());\n  }\n}\n\nconst KNOB_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Knob),\n  multi: true\n};\n\nclass Knob {\n  constructor(cd, el) {\n    this.cd = cd;\n    this.el = el;\n    this.valueColor = \"var(--primary-color, Black)\";\n    this.rangeColor = \"var(--surface-border, LightGray)\";\n    this.textColor = \"var(--text-color-secondary, Black)\";\n    this.valueTemplate = \"{value}\";\n    this.size = 100;\n    this.step = 1;\n    this.min = 0;\n    this.max = 100;\n    this.strokeWidth = 14;\n    this.showValue = true;\n    this.readonly = false;\n    this.onChange = new EventEmitter();\n    this.radius = 40;\n    this.midX = 50;\n    this.midY = 50;\n    this.minRadians = 4 * Math.PI / 3;\n    this.maxRadians = -Math.PI / 3;\n    this.value = null;\n\n    this.onModelChange = () => {};\n\n    this.onModelTouched = () => {};\n  }\n\n  mapRange(x, inMin, inMax, outMin, outMax) {\n    return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n  onClick(event) {\n    if (!this.disabled && !this.readonly) {\n      this.updateValue(event.offsetX, event.offsetY);\n    }\n  }\n\n  updateValue(offsetX, offsetY) {\n    let dx = offsetX - this.size / 2;\n    let dy = this.size / 2 - offsetY;\n    let angle = Math.atan2(dy, dx);\n    let start = -Math.PI / 2 - Math.PI / 6;\n    this.updateModel(angle, start);\n  }\n\n  updateModel(angle, start) {\n    let mappedValue;\n    if (angle > this.maxRadians) mappedValue = this.mapRange(angle, this.minRadians, this.maxRadians, this.min, this.max);else if (angle < start) mappedValue = this.mapRange(angle + 2 * Math.PI, this.minRadians, this.maxRadians, this.min, this.max);else return;\n    let newValue = Math.round((mappedValue - this.min) / this.step) * this.step + this.min;\n    this.value = newValue;\n    this.onModelChange(this.value);\n    this.onChange.emit(this.value);\n  }\n\n  onMouseDown(event) {\n    if (!this.disabled && !this.readonly) {\n      this.windowMouseMoveListener = this.onMouseMove.bind(this);\n      this.windowMouseUpListener = this.onMouseUp.bind(this);\n      window.addEventListener('mousemove', this.windowMouseMoveListener);\n      window.addEventListener('mouseup', this.windowMouseUpListener);\n      event.preventDefault();\n    }\n  }\n\n  onMouseUp(event) {\n    if (!this.disabled && !this.readonly) {\n      window.removeEventListener('mousemove', this.windowMouseMoveListener);\n      window.removeEventListener('mouseup', this.windowMouseUpListener);\n      this.windowMouseUpListener = null;\n      this.windowMouseMoveListener = null;\n      event.preventDefault();\n    }\n  }\n\n  onTouchStart(event) {\n    if (!this.disabled && !this.readonly) {\n      this.windowTouchMoveListener = this.onTouchMove.bind(this);\n      this.windowTouchEndListener = this.onTouchEnd.bind(this);\n      window.addEventListener('touchmove', this.windowTouchMoveListener);\n      window.addEventListener('touchend', this.windowTouchEndListener);\n      event.preventDefault();\n    }\n  }\n\n  onTouchEnd(event) {\n    if (!this.disabled && !this.readonly) {\n      window.removeEventListener('touchmove', this.windowTouchMoveListener);\n      window.removeEventListener('touchend', this.windowTouchEndListener);\n      this.windowTouchMoveListener = null;\n      this.windowTouchEndListener = null;\n      event.preventDefault();\n    }\n  }\n\n  onMouseMove(event) {\n    if (!this.disabled && !this.readonly) {\n      this.updateValue(event.offsetX, event.offsetY);\n      event.preventDefault();\n    }\n  }\n\n  onTouchMove(event) {\n    if (!this.disabled && !this.readonly && event.touches.length == 1) {\n      const rect = this.el.nativeElement.children[0].getBoundingClientRect();\n      const touch = event.targetTouches.item(0);\n      const offsetX = touch.clientX - rect.left;\n      const offsetY = touch.clientY - rect.top;\n      this.updateValue(offsetX, offsetY);\n    }\n  }\n\n  writeValue(value) {\n    this.value = value;\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState(val) {\n    this.disabled = val;\n    this.cd.markForCheck();\n  }\n\n  containerClass() {\n    return {\n      'p-knob p-component': true,\n      'p-disabled': this.disabled\n    };\n  }\n\n  rangePath() {\n    return `M ${this.minX()} ${this.minY()} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX()} ${this.maxY()}`;\n  }\n\n  valuePath() {\n    return `M ${this.zeroX()} ${this.zeroY()} A ${this.radius} ${this.radius} 0 ${this.largeArc()} ${this.sweep()} ${this.valueX()} ${this.valueY()}`;\n  }\n\n  zeroRadians() {\n    if (this.min > 0 && this.max > 0) return this.mapRange(this.min, this.min, this.max, this.minRadians, this.maxRadians);else return this.mapRange(0, this.min, this.max, this.minRadians, this.maxRadians);\n  }\n\n  valueRadians() {\n    return this.mapRange(this._value, this.min, this.max, this.minRadians, this.maxRadians);\n  }\n\n  minX() {\n    return this.midX + Math.cos(this.minRadians) * this.radius;\n  }\n\n  minY() {\n    return this.midY - Math.sin(this.minRadians) * this.radius;\n  }\n\n  maxX() {\n    return this.midX + Math.cos(this.maxRadians) * this.radius;\n  }\n\n  maxY() {\n    return this.midY - Math.sin(this.maxRadians) * this.radius;\n  }\n\n  zeroX() {\n    return this.midX + Math.cos(this.zeroRadians()) * this.radius;\n  }\n\n  zeroY() {\n    return this.midY - Math.sin(this.zeroRadians()) * this.radius;\n  }\n\n  valueX() {\n    return this.midX + Math.cos(this.valueRadians()) * this.radius;\n  }\n\n  valueY() {\n    return this.midY - Math.sin(this.valueRadians()) * this.radius;\n  }\n\n  largeArc() {\n    return Math.abs(this.zeroRadians() - this.valueRadians()) < Math.PI ? 0 : 1;\n  }\n\n  sweep() {\n    return this.valueRadians() > this.zeroRadians() ? 0 : 1;\n  }\n\n  valueToDisplay() {\n    return this.valueTemplate.replace(\"{value}\", this._value.toString());\n  }\n\n  get _value() {\n    return this.value != null ? this.value : this.min;\n  }\n\n}\n\nKnob.ɵfac = function Knob_Factory(t) {\n  return new (t || Knob)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nKnob.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Knob,\n  selectors: [[\"p-knob\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    styleClass: \"styleClass\",\n    style: \"style\",\n    severity: \"severity\",\n    valueColor: \"valueColor\",\n    rangeColor: \"rangeColor\",\n    textColor: \"textColor\",\n    valueTemplate: \"valueTemplate\",\n    name: \"name\",\n    size: \"size\",\n    step: \"step\",\n    min: \"min\",\n    max: \"max\",\n    strokeWidth: \"strokeWidth\",\n    disabled: \"disabled\",\n    showValue: \"showValue\",\n    readonly: \"readonly\"\n  },\n  outputs: {\n    onChange: \"onChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([KNOB_VALUE_ACCESSOR])],\n  decls: 5,\n  vars: 15,\n  consts: [[3, \"ngClass\", \"ngStyle\"], [\"viewBox\", \"0 0 100 100\", 3, \"click\", \"mousedown\", \"mouseup\", \"touchstart\", \"touchend\"], [1, \"p-knob-range\"], [1, \"p-knob-value\"], [\"text-anchor\", \"middle\", \"class\", \"p-knob-text\", 4, \"ngIf\"], [\"text-anchor\", \"middle\", 1, \"p-knob-text\"]],\n  template: function Knob_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵlistener(\"click\", function Knob_Template__svg_svg_click_1_listener($event) {\n        return ctx.onClick($event);\n      })(\"mousedown\", function Knob_Template__svg_svg_mousedown_1_listener($event) {\n        return ctx.onMouseDown($event);\n      })(\"mouseup\", function Knob_Template__svg_svg_mouseup_1_listener($event) {\n        return ctx.onMouseUp($event);\n      })(\"touchstart\", function Knob_Template__svg_svg_touchstart_1_listener($event) {\n        return ctx.onTouchStart($event);\n      })(\"touchend\", function Knob_Template__svg_svg_touchend_1_listener($event) {\n        return ctx.onTouchEnd($event);\n      });\n      i0.ɵɵelement(2, \"path\", 2);\n      i0.ɵɵelement(3, \"path\", 3);\n      i0.ɵɵtemplate(4, Knob__svg_text_4_Template, 2, 5, \"text\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngClass\", ctx.containerClass())(\"ngStyle\", ctx.style);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.size + \"px\")(\"height\", ctx.size + \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"d\", ctx.rangePath())(\"stroke-width\", ctx.strokeWidth)(\"stroke\", ctx.rangeColor);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"d\", ctx.valuePath())(\"stroke-width\", ctx.strokeWidth)(\"stroke\", ctx.valueColor);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showValue);\n    }\n  },\n  directives: [i1.NgClass, i1.NgStyle, i1.NgIf],\n  styles: [\"@keyframes dash-frame{to{stroke-dashoffset:0}}.p-knob-range{fill:none;transition:stroke .1s ease-in}.p-knob-value{animation-name:dash-frame;animation-fill-mode:forwards;fill:none}.p-knob-text{font-size:1.3rem;text-align:center}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Knob, [{\n    type: Component,\n    args: [{\n      selector: 'p-knob',\n      template: `\n        <div [ngClass]=\"containerClass()\" [class]=\"styleClass\" [ngStyle]=\"style\">\n        <svg viewBox=\"0 0 100 100\" [style.width]=\"size + 'px'\" [style.height]=\"size + 'px'\" (click)=\"onClick($event)\" (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\n            (touchstart)=\"onTouchStart($event)\" (touchend)=\"onTouchEnd($event)\">\n            <path [attr.d]=\"rangePath()\" [attr.stroke-width]=\"strokeWidth\" [attr.stroke]=\"rangeColor\" class=\"p-knob-range\"></path>\n            <path [attr.d]=\"valuePath()\" [attr.stroke-width]=\"strokeWidth\" [attr.stroke]=\"valueColor\" class=\"p-knob-value\"></path>\n            <text *ngIf=\"showValue\" [attr.x]=\"50\" [attr.y]=\"57\" text-anchor=\"middle\" [attr.fill]=\"textColor\" class=\"p-knob-text\" [attr.name]=\"name\">{{valueToDisplay()}}</text>\n        </svg>\n        </div>\n    `,\n      providers: [KNOB_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'p-element'\n      },\n      styles: [\"@keyframes dash-frame{to{stroke-dashoffset:0}}.p-knob-range{fill:none;transition:stroke .1s ease-in}.p-knob-value{animation-name:dash-frame;animation-fill-mode:forwards;fill:none}.p-knob-text{font-size:1.3rem;text-align:center}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    styleClass: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    severity: [{\n      type: Input\n    }],\n    valueColor: [{\n      type: Input\n    }],\n    rangeColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueTemplate: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    showValue: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    onChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass KnobModule {}\n\nKnobModule.ɵfac = function KnobModule_Factory(t) {\n  return new (t || KnobModule)();\n};\n\nKnobModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: KnobModule\n});\nKnobModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KnobModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [Knob],\n      declarations: [Knob]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { KNOB_VALUE_ACCESSOR, Knob, KnobModule };","map":{"version":3,"sources":["/Applications/admin_gooway/node_modules/primeng/fesm2020/primeng-knob.mjs"],"names":["i0","forwardRef","EventEmitter","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","Output","NgModule","i1","CommonModule","NG_VALUE_ACCESSOR","KNOB_VALUE_ACCESSOR","provide","useExisting","Knob","multi","constructor","cd","el","valueColor","rangeColor","textColor","valueTemplate","size","step","min","max","strokeWidth","showValue","readonly","onChange","radius","midX","midY","minRadians","Math","PI","maxRadians","value","onModelChange","onModelTouched","mapRange","x","inMin","inMax","outMin","outMax","onClick","event","disabled","updateValue","offsetX","offsetY","dx","dy","angle","atan2","start","updateModel","mappedValue","newValue","round","emit","onMouseDown","windowMouseMoveListener","onMouseMove","bind","windowMouseUpListener","onMouseUp","window","addEventListener","preventDefault","removeEventListener","onTouchStart","windowTouchMoveListener","onTouchMove","windowTouchEndListener","onTouchEnd","touches","length","rect","nativeElement","children","getBoundingClientRect","touch","targetTouches","item","clientX","left","clientY","top","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","containerClass","rangePath","minX","minY","maxX","maxY","valuePath","zeroX","zeroY","largeArc","sweep","valueX","valueY","zeroRadians","valueRadians","_value","cos","sin","abs","valueToDisplay","replace","toString","ɵfac","ChangeDetectorRef","ElementRef","ɵcmp","NgClass","NgStyle","NgIf","type","args","selector","template","providers","changeDetection","OnPush","encapsulation","None","host","styles","styleClass","style","severity","name","KnobModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst KNOB_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Knob),\n    multi: true\n};\nclass Knob {\n    constructor(cd, el) {\n        this.cd = cd;\n        this.el = el;\n        this.valueColor = \"var(--primary-color, Black)\";\n        this.rangeColor = \"var(--surface-border, LightGray)\";\n        this.textColor = \"var(--text-color-secondary, Black)\";\n        this.valueTemplate = \"{value}\";\n        this.size = 100;\n        this.step = 1;\n        this.min = 0;\n        this.max = 100;\n        this.strokeWidth = 14;\n        this.showValue = true;\n        this.readonly = false;\n        this.onChange = new EventEmitter();\n        this.radius = 40;\n        this.midX = 50;\n        this.midY = 50;\n        this.minRadians = 4 * Math.PI / 3;\n        this.maxRadians = -Math.PI / 3;\n        this.value = null;\n        this.onModelChange = () => { };\n        this.onModelTouched = () => { };\n    }\n    mapRange(x, inMin, inMax, outMin, outMax) {\n        return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n    }\n    onClick(event) {\n        if (!this.disabled && !this.readonly) {\n            this.updateValue(event.offsetX, event.offsetY);\n        }\n    }\n    updateValue(offsetX, offsetY) {\n        let dx = offsetX - this.size / 2;\n        let dy = this.size / 2 - offsetY;\n        let angle = Math.atan2(dy, dx);\n        let start = -Math.PI / 2 - Math.PI / 6;\n        this.updateModel(angle, start);\n    }\n    updateModel(angle, start) {\n        let mappedValue;\n        if (angle > this.maxRadians)\n            mappedValue = this.mapRange(angle, this.minRadians, this.maxRadians, this.min, this.max);\n        else if (angle < start)\n            mappedValue = this.mapRange(angle + 2 * Math.PI, this.minRadians, this.maxRadians, this.min, this.max);\n        else\n            return;\n        let newValue = Math.round((mappedValue - this.min) / this.step) * this.step + this.min;\n        this.value = newValue;\n        this.onModelChange(this.value);\n        this.onChange.emit(this.value);\n    }\n    onMouseDown(event) {\n        if (!this.disabled && !this.readonly) {\n            this.windowMouseMoveListener = this.onMouseMove.bind(this);\n            this.windowMouseUpListener = this.onMouseUp.bind(this);\n            window.addEventListener('mousemove', this.windowMouseMoveListener);\n            window.addEventListener('mouseup', this.windowMouseUpListener);\n            event.preventDefault();\n        }\n    }\n    onMouseUp(event) {\n        if (!this.disabled && !this.readonly) {\n            window.removeEventListener('mousemove', this.windowMouseMoveListener);\n            window.removeEventListener('mouseup', this.windowMouseUpListener);\n            this.windowMouseUpListener = null;\n            this.windowMouseMoveListener = null;\n            event.preventDefault();\n        }\n    }\n    onTouchStart(event) {\n        if (!this.disabled && !this.readonly) {\n            this.windowTouchMoveListener = this.onTouchMove.bind(this);\n            this.windowTouchEndListener = this.onTouchEnd.bind(this);\n            window.addEventListener('touchmove', this.windowTouchMoveListener);\n            window.addEventListener('touchend', this.windowTouchEndListener);\n            event.preventDefault();\n        }\n    }\n    onTouchEnd(event) {\n        if (!this.disabled && !this.readonly) {\n            window.removeEventListener('touchmove', this.windowTouchMoveListener);\n            window.removeEventListener('touchend', this.windowTouchEndListener);\n            this.windowTouchMoveListener = null;\n            this.windowTouchEndListener = null;\n            event.preventDefault();\n        }\n    }\n    onMouseMove(event) {\n        if (!this.disabled && !this.readonly) {\n            this.updateValue(event.offsetX, event.offsetY);\n            event.preventDefault();\n        }\n    }\n    onTouchMove(event) {\n        if (!this.disabled && !this.readonly && event.touches.length == 1) {\n            const rect = this.el.nativeElement.children[0].getBoundingClientRect();\n            const touch = event.targetTouches.item(0);\n            const offsetX = touch.clientX - rect.left;\n            const offsetY = touch.clientY - rect.top;\n            this.updateValue(offsetX, offsetY);\n        }\n    }\n    writeValue(value) {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    containerClass() {\n        return {\n            'p-knob p-component': true,\n            'p-disabled': this.disabled\n        };\n    }\n    rangePath() {\n        return `M ${this.minX()} ${this.minY()} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX()} ${this.maxY()}`;\n    }\n    valuePath() {\n        return `M ${this.zeroX()} ${this.zeroY()} A ${this.radius} ${this.radius} 0 ${this.largeArc()} ${this.sweep()} ${this.valueX()} ${this.valueY()}`;\n    }\n    zeroRadians() {\n        if (this.min > 0 && this.max > 0)\n            return this.mapRange(this.min, this.min, this.max, this.minRadians, this.maxRadians);\n        else\n            return this.mapRange(0, this.min, this.max, this.minRadians, this.maxRadians);\n    }\n    valueRadians() {\n        return this.mapRange(this._value, this.min, this.max, this.minRadians, this.maxRadians);\n    }\n    minX() {\n        return this.midX + Math.cos(this.minRadians) * this.radius;\n    }\n    minY() {\n        return this.midY - Math.sin(this.minRadians) * this.radius;\n    }\n    maxX() {\n        return this.midX + Math.cos(this.maxRadians) * this.radius;\n    }\n    maxY() {\n        return this.midY - Math.sin(this.maxRadians) * this.radius;\n    }\n    zeroX() {\n        return this.midX + Math.cos(this.zeroRadians()) * this.radius;\n    }\n    zeroY() {\n        return this.midY - Math.sin(this.zeroRadians()) * this.radius;\n    }\n    valueX() {\n        return this.midX + Math.cos(this.valueRadians()) * this.radius;\n    }\n    valueY() {\n        return this.midY - Math.sin(this.valueRadians()) * this.radius;\n    }\n    largeArc() {\n        return Math.abs(this.zeroRadians() - this.valueRadians()) < Math.PI ? 0 : 1;\n    }\n    sweep() {\n        return this.valueRadians() > this.zeroRadians() ? 0 : 1;\n    }\n    valueToDisplay() {\n        return this.valueTemplate.replace(\"{value}\", this._value.toString());\n    }\n    get _value() {\n        return this.value != null ? this.value : this.min;\n    }\n}\nKnob.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: Knob, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nKnob.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: Knob, selector: \"p-knob\", inputs: { styleClass: \"styleClass\", style: \"style\", severity: \"severity\", valueColor: \"valueColor\", rangeColor: \"rangeColor\", textColor: \"textColor\", valueTemplate: \"valueTemplate\", name: \"name\", size: \"size\", step: \"step\", min: \"min\", max: \"max\", strokeWidth: \"strokeWidth\", disabled: \"disabled\", showValue: \"showValue\", readonly: \"readonly\" }, outputs: { onChange: \"onChange\" }, host: { classAttribute: \"p-element\" }, providers: [KNOB_VALUE_ACCESSOR], ngImport: i0, template: `\n        <div [ngClass]=\"containerClass()\" [class]=\"styleClass\" [ngStyle]=\"style\">\n        <svg viewBox=\"0 0 100 100\" [style.width]=\"size + 'px'\" [style.height]=\"size + 'px'\" (click)=\"onClick($event)\" (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\n            (touchstart)=\"onTouchStart($event)\" (touchend)=\"onTouchEnd($event)\">\n            <path [attr.d]=\"rangePath()\" [attr.stroke-width]=\"strokeWidth\" [attr.stroke]=\"rangeColor\" class=\"p-knob-range\"></path>\n            <path [attr.d]=\"valuePath()\" [attr.stroke-width]=\"strokeWidth\" [attr.stroke]=\"valueColor\" class=\"p-knob-value\"></path>\n            <text *ngIf=\"showValue\" [attr.x]=\"50\" [attr.y]=\"57\" text-anchor=\"middle\" [attr.fill]=\"textColor\" class=\"p-knob-text\" [attr.name]=\"name\">{{valueToDisplay()}}</text>\n        </svg>\n        </div>\n    `, isInline: true, styles: [\"@keyframes dash-frame{to{stroke-dashoffset:0}}.p-knob-range{fill:none;transition:stroke .1s ease-in}.p-knob-value{animation-name:dash-frame;animation-fill-mode:forwards;fill:none}.p-knob-text{font-size:1.3rem;text-align:center}\\n\"], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: Knob, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-knob', template: `\n        <div [ngClass]=\"containerClass()\" [class]=\"styleClass\" [ngStyle]=\"style\">\n        <svg viewBox=\"0 0 100 100\" [style.width]=\"size + 'px'\" [style.height]=\"size + 'px'\" (click)=\"onClick($event)\" (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\n            (touchstart)=\"onTouchStart($event)\" (touchend)=\"onTouchEnd($event)\">\n            <path [attr.d]=\"rangePath()\" [attr.stroke-width]=\"strokeWidth\" [attr.stroke]=\"rangeColor\" class=\"p-knob-range\"></path>\n            <path [attr.d]=\"valuePath()\" [attr.stroke-width]=\"strokeWidth\" [attr.stroke]=\"valueColor\" class=\"p-knob-value\"></path>\n            <text *ngIf=\"showValue\" [attr.x]=\"50\" [attr.y]=\"57\" text-anchor=\"middle\" [attr.fill]=\"textColor\" class=\"p-knob-text\" [attr.name]=\"name\">{{valueToDisplay()}}</text>\n        </svg>\n        </div>\n    `, providers: [KNOB_VALUE_ACCESSOR], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {\n                        'class': 'p-element'\n                    }, styles: [\"@keyframes dash-frame{to{stroke-dashoffset:0}}.p-knob-range{fill:none;transition:stroke .1s ease-in}.p-knob-value{animation-name:dash-frame;animation-fill-mode:forwards;fill:none}.p-knob-text{font-size:1.3rem;text-align:center}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { styleClass: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], severity: [{\n                type: Input\n            }], valueColor: [{\n                type: Input\n            }], rangeColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueTemplate: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], showValue: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], onChange: [{\n                type: Output\n            }] } });\nclass KnobModule {\n}\nKnobModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: KnobModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nKnobModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: KnobModule, declarations: [Knob], imports: [CommonModule], exports: [Knob] });\nKnobModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: KnobModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: KnobModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [Knob],\n                    declarations: [Knob]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KNOB_VALUE_ACCESSOR, Knob, KnobModule };\n"]},"metadata":{},"sourceType":"module"}