{"ast":null,"code":"import _asyncToGenerator from \"/Applications/admin_gooway/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth-api/auth-api.service\";\nexport class CategoryService {\n  constructor(http, _authService) {\n    this.http = http;\n    this._authService = _authService;\n    this.urlApi = environment.url_api;\n    this.local = this._authService.getInfoLocal();\n  }\n\n  handleError(err) {\n    let errorMessage;\n\n    if (err.error instanceof ErrorEvent) {\n      //Deprecated. Http requests never emit an ErrorEvent\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  addCategory(category) {\n    var _this = this;\n\n    const URI = this.urlApi + 'categories/create';\n    return this.http.post(URI, category).pipe(catchError( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (err) {\n        if (err.status == 401) {\n          _this._authService.logout();\n        }\n\n        _this.handleError(err);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n  }\n\n  updateCategory(id, category) {\n    var _this2 = this;\n\n    const URI = this.urlApi + `categories/update/${id}`;\n    return this.http.put(URI, category).pipe(catchError( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (err) {\n        if (err.status == 401) {\n          _this2._authService.logout();\n        }\n\n        _this2.handleError(err);\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n  }\n\n  deleteCategory(id) {\n    var _this3 = this;\n\n    const URI = this.urlApi + `categories/delete/${id}`;\n    return this.http.delete(URI).pipe(catchError( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (err) {\n        if (err.status == 401) {\n          _this3._authService.logout();\n        }\n\n        _this3.handleError(err);\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n  }\n\n  getCategoryById(id) {\n    var _this4 = this;\n\n    let companyId = this.local.companyId;\n    const URI = this.urlApi + `categories/findById/${id}`;\n    let data = {\n      \"companyId\": companyId\n    };\n    return this.http.post(URI, data).pipe(catchError( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (err) {\n        if (err.status == 401) {\n          _this4._authService.logout();\n        }\n\n        _this4.handleError(err);\n      });\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()));\n  }\n\n  getCategories() {\n    var _this5 = this;\n\n    const URI = this.urlApi + `categories/listar`;\n    let companyId = this.local.companyId;\n    return this.http.get(URI).pipe(catchError( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (err) {\n        if (err.status == 401) {\n          _this5._authService.logout();\n        }\n\n        _this5.handleError(err);\n      });\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()));\n  }\n\n}\n\nCategoryService.ɵfac = function CategoryService_Factory(t) {\n  return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthApiService));\n};\n\nCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryService,\n  factory: CategoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Applications/admin_gooway/src/app/infrastructure/services/category/category.service.ts"],"names":["catchError","environment","i0","i1","i2","CategoryService","constructor","http","_authService","urlApi","url_api","local","getInfoLocal","handleError","err","errorMessage","error","ErrorEvent","message","status","Error","addCategory","category","URI","post","pipe","logout","updateCategory","id","put","deleteCategory","delete","getCategoryById","companyId","data","getCategories","get","ɵfac","CategoryService_Factory","t","ɵɵinject","HttpClient","AuthApiService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth-api/auth-api.service\";\nexport class CategoryService {\n    constructor(http, _authService) {\n        this.http = http;\n        this._authService = _authService;\n        this.urlApi = environment.url_api;\n        this.local = this._authService.getInfoLocal();\n    }\n    handleError(err) {\n        let errorMessage;\n        if (err.error instanceof ErrorEvent) {\n            //Deprecated. Http requests never emit an ErrorEvent\n            errorMessage = `An error occurred: ${err.error.message}`;\n        }\n        else {\n            errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n        }\n        throw new Error(errorMessage);\n    }\n    addCategory(category) {\n        const URI = this.urlApi + 'categories/create';\n        return this.http.post(URI, category).\n            pipe(catchError(async (err) => {\n            if (err.status == 401) {\n                this._authService.logout();\n            }\n            this.handleError(err);\n        }));\n    }\n    updateCategory(id, category) {\n        const URI = this.urlApi + `categories/update/${id}`;\n        return this.http.put(URI, category).\n            pipe(catchError(async (err) => {\n            if (err.status == 401) {\n                this._authService.logout();\n            }\n            this.handleError(err);\n        }));\n    }\n    deleteCategory(id) {\n        const URI = this.urlApi + `categories/delete/${id}`;\n        return this.http.delete(URI).pipe(catchError(async (err) => {\n            if (err.status == 401) {\n                this._authService.logout();\n            }\n            this.handleError(err);\n        }));\n    }\n    getCategoryById(id) {\n        let companyId = this.local.companyId;\n        const URI = this.urlApi + `categories/findById/${id}`;\n        let data = {\n            \"companyId\": companyId\n        };\n        return this.http.post(URI, data).\n            pipe(catchError(async (err) => {\n            if (err.status == 401) {\n                this._authService.logout();\n            }\n            this.handleError(err);\n        }));\n    }\n    getCategories() {\n        const URI = this.urlApi + `categories/listar`;\n        let companyId = this.local.companyId;\n        return this.http.get(URI).\n            pipe(catchError(async (err) => {\n            if (err.status == 401) {\n                this._authService.logout();\n            }\n            this.handleError(err);\n        }));\n    }\n}\nCategoryService.ɵfac = function CategoryService_Factory(t) { return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthApiService)); };\nCategoryService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CategoryService, factory: CategoryService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}